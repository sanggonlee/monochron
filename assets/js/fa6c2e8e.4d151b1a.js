(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{81:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return u}));var a=n(3),r=n(7),b=(n(0),n(91)),i={sidebar_position:4},o={unversionedId:"types",id:"types",isDocsHomePage:!1,title:"Types",description:"---",source:"@site/docs/types.md",sourceDirName:".",slug:"/types",permalink:"/monochron/docs/types",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/types.md",version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"RealtimeChart",permalink:"/monochron/docs/realtime-chart"}},l=[{value:"RootBucket",id:"rootbucket",children:[]},{value:"Bucket",id:"bucket",children:[]},{value:"RenderRowFunc",id:"renderrowfunc",children:[]},{value:"Row",id:"row",children:[]}],c={toc:l};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(b.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(b.b)("hr",null),Object(b.b)("h2",{id:"rootbucket"},"RootBucket"),Object(b.b)("p",null,"RootBucket is the top level bucket which represents one time slice in the timeseries data."),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-ts"},"RootBucket {\n  t_start: string;\n  t_end: string;\n  entries: Bucket[];\n}\n")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null},"Field"),Object(b.b)("th",{parentName:"tr",align:null},"Type"),Object(b.b)("th",{parentName:"tr",align:null},"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"t_start"),Object(b.b)("td",{parentName:"tr",align:null},"string"),Object(b.b)("td",{parentName:"tr",align:null},"Start time of the data slice of your data bucket. It maps to the position of the bar's left side, if the data for bar is newly entering.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"t_end"),Object(b.b)("td",{parentName:"tr",align:null},"string"),Object(b.b)("td",{parentName:"tr",align:null},"End time of the data slice of your data bucket. It maps to the position of the bar's right side, if the data for bar is exiting.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"entries"),Object(b.b)("td",{parentName:"tr",align:null},"Array<",Object(b.b)("a",{parentName:"td",href:"/docs/types#bucket"},"Bucket"),">"),Object(b.b)("td",{parentName:"tr",align:null},"List of data buckets, where each item will map to an individual bar in the chart.")))),Object(b.b)("hr",null),Object(b.b)("img",{src:"./rootbucket.png"}),Object(b.b)("p",null,"It represents one time slice (whose width maps to the time interval) of the entire timeseries data."),Object(b.b)("h2",{id:"bucket"},"Bucket"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-ts"},"Bucket {\n  key: string;\n  start: number;\n  end: number;\n  data: unknown;\n  buckets?: Bucket[];\n}\n")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null},"Field"),Object(b.b)("th",{parentName:"tr",align:null},"Type"),Object(b.b)("th",{parentName:"tr",align:null},"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"key"),Object(b.b)("td",{parentName:"tr",align:null},"string"),Object(b.b)("td",{parentName:"tr",align:null},"Key of the bucket. Should be unique among its peer buckets.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"start"),Object(b.b)("td",{parentName:"tr",align:null},"number"),Object(b.b)("td",{parentName:"tr",align:null},"Start time of the bucket data, in milliseconds. NOTE: This will automatically be filled and overwritten by monochron if you're working with TimeseriesChart. Only applicable if you're working with RealtimeChart.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"end"),Object(b.b)("td",{parentName:"tr",align:null},"number"),Object(b.b)("td",{parentName:"tr",align:null},"End time of the bucket data, in milliseconds. NOTE: This will automatically be filled and overwritten by monochron if you're working with TimeseriesChart. Only applicable if you're working with RealtimeChart.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"data"),Object(b.b)("td",{parentName:"tr",align:null},"unknown"),Object(b.b)("td",{parentName:"tr",align:null},"Data object of your entry. You can use this field to format your row as you like. In TypeScript you will need to cast this to your known type, i.e. ",Object(b.b)("inlineCode",{parentName:"td"},"const person = bucket.data as Person;"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"buckets"),Object(b.b)("td",{parentName:"tr",align:null},"Array<",Object(b.b)("a",{parentName:"td",href:"/docs/types#bucket"},"Bucket"),">"),Object(b.b)("td",{parentName:"tr",align:null},"Optional. monochron supports recursive rows in the chart (i.e. rows in a row in a row, etc). Structure buckets if you're intending to do this.")))),Object(b.b)("hr",null),Object(b.b)("img",{src:"./bucket.png"}),Object(b.b)("p",null,"It represents a single row (at whatever depth) in the chart."),Object(b.b)("h2",{id:"renderrowfunc"},"RenderRowFunc"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-ts"},"type RenderRowFunc = (\n  value: Bucket,\n  RowComponent: (props: RowProps) => ReactElement\n) => ReactNode;\n")),Object(b.b)("p",null,"The function you can use to format your row. See ",Object(b.b)("inlineCode",{parentName:"p"},"renderRow")," prop of ",Object(b.b)("a",{parentName:"p",href:"/docs/timeseries-chart"},"TimeseriesChart")," or ",Object(b.b)("a",{parentName:"p",href:"/docs/realtime-chart"},"RealtimeChart"),"."),Object(b.b)("h2",{id:"row"},"Row"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-ts"},"<Row\n    key={key}\n    start={startTime}\n    end={endTime}\n>\n    <p>My row</p>\n</Row>\n")),Object(b.b)("p",null,"You cannot import and use ",Object(b.b)("inlineCode",{parentName:"p"},"Row")," directly. You will be passed this component in ",Object(b.b)("a",{parentName:"p",href:"/docs/types#renderrowfunc"},"RenderRowFunc")))}u.isMDXComponent=!0}}]);